/// <reference path="liveMapNamespace.js" />
/// <reference path="//code.jquery.com/jquery-2.1.1.min.js"/>

liveMapData.map = function (options) {

    // Private variables
    var opts = $.extend({}, liveMapData.map.defaults, options);
    var styleCache = {};
    var vectorLayer;
    var olMap;

    // Private functions

    /*
        Standard icon style.  Only supports type: 'hgv' 
        for now, anything else will use a TODO.png (that doesn't exist)
    */
    var getIconStyle = function (type, course) {
        return new ol.style.Style({
            image: new ol.style.Icon(/** @type {olx.style.IconOptions} */({
                src: type == "hgv" ? 'content/img/vehicle.png' : 'content/img/TODO.png',
                rotation: degreesToRadians(course)
            }))
        });
    };

    var degreesToRadians = function (degrees) {
        return degrees * (Math.PI / 180);
    };

    /*
        Style for when the map is zoomed out
    */
    var getPointStyle = function () {
        return new ol.style.Style({
            image: new ol.style.Circle({
                radius: 2,
                fill: new ol.style.Fill({ color: 'blue' })
            })
        })
    };

    var createVectorLayer = function () {
        return new ol.layer.Vector({
            source: new ol.source.GeoJSON({
                projection: 'EPSG:3857', // projection of the map
                // TODO: URL needs to be passed in as an option
                url: 'data/vehicles.json'  // currently static data, but this could be generated by the server.  GeoJSON format required
            }),
            style: function (feature, resolution) {
                console.log(resolution);
                // This is called as the view is updating, i.e on pan and zoom
                // so we could put some logic here to show icons at a certain resolution
                // (which is the inverse of zoom level, with lower numbers being closer to the map,
                // and larger numbers further away)
                // but we could say render dots when zoomed out, or shrink the size of the icon.
                // This is showing how we could just use 1 style of the zoomed out points.
                // If we wanted smaller vehicle icons we'd have to cache them in the style cache
                // for "low", "medium", "high"  

                // Define a cache key based on the type ('hgv') and course, as this affects the
                // rotation of the image
                var text = resolution < 500 ? feature.get('type') + "_" + feature.get('course') : '';
                if (!styleCache[text]) {

                    var style = text != ''
                        ? getIconStyle(feature.get('type'), feature.get('course'))
                        : getPointStyle();

                    styleCache[text] = [style];
                }
                return styleCache[text];
            }
        });
    };

    var createMap = function () {
        return new ol.Map({
            target: opts.container,
            layers: [
              new ol.layer.Tile({
                  source: new ol.source.OSM()
              }),
              vectorLayer
            ],
            view: new ol.View({
                center: ol.proj.transform(opts.startLocation.coords, opts.startLocation.projection, 'EPSG:3857'),            
                zoom: opts.startLocation.zoom
            })
        });
    };

    var getFeature = function(id) {
        var source = vectorLayer.getSource();
        return source.getFeatureById(id);
    };

    this.init = function () {
        vectorLayer = createVectorLayer();
        olMap = createMap();
    };

    this.moveFeature = function (featureId, coords, course, type) {
        
        var feature = getFeature(featureId);        
        feature.set("course", course);

        // Do we need to pass in the coords projection too?
        // Assuming Geographic for now
        var newPoint = new ol.geom.Point(ol.proj.transform(coords, 'EPSG:4326', 'EPSG:3857'));
        feature.setGeometry(newPoint);
        //feature.setStyle(getIconStyle(type, course));
    };
};

// Set these to something sensible.  Using test details for now
liveMapData.map.defaults = {
    container: 'map',
    startLocation: {
        coords: [-4.495420, 50.339800],
        projection: 'EPSG:4326',
        zoom: 12
    }
};

// not keen on having a global instance, 
// but it'll do for now
liveMapData.map.instance = {};