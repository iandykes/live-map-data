; (function ($) {

    var getIconStyle = function (type, course) {
        return new ol.style.Style({
            image: new ol.style.Icon(/** @type {olx.style.IconOptions} */({
                src: type == "hgv" ? 'content/img/vehicle.png' : 'content/img/TODO.png',
                rotation: degreesToRadians(course)
            }))
        });
    };

    /*
        Style for when the map is zoomed out
    */
    var getPointStyle = function () {
        return new ol.style.Style({
            image: new ol.style.Circle({
                radius: 2,
                fill: new ol.style.Fill({ color: 'blue' })
            })
        })
    };

    var degreesToRadians = function (degrees) {
        return degrees * (Math.PI / 180);
    };

    var moveFeature = function (feature, coords, course, speed) {
        var newPoint = new ol.geom.Point(ol.proj.transform(coords, 'EPSG:4326', 'EPSG:3857'));
        feature.setGeometry(newPoint);
        feature.setStyle(getIconStyle("hgv", course));
    };

    var styleCache = {};

    var vectorLayer = new ol.layer.Vector({
        source: new ol.source.GeoJSON({
            projection: 'EPSG:3857', // projection of the map
            url: 'data/vehicles.json'  // currently static data, but this could be generated by the server.  GeoJSON format required
        }),
        style: function (feature, resolution) {
            console.log(resolution);
            // This is called as the view is updating, i.e on pan and zoom
            // so we could put some logic here to show icons at a certain resolution
            // (which is the inverse of zoom level, with lower numbers being closer to the map,
            // and larger numbers further away)
            // but we could say render dots when zoomed out, or shrink the size of the icon.
            // This is showing how we could just use 1 style of the zoomed out points.
            // If we wanted smaller vehicle icons we'd have to cache them in the style cache
            // for "low", "medium", "high"            
            var text = resolution < 500 ? feature.get('name') : '';
            if (!styleCache[text]) {

                var style = text != ''
                    ? getIconStyle(feature.get('type'), feature.get('course'))
                    : getPointStyle();

                styleCache[text] = [style];
            }
            return styleCache[text];
        }
    });

    var olMap = new ol.Map({
        target: 'map',
        layers: [
          new ol.layer.Tile({
              source: new ol.source.OSM()
          }),
          vectorLayer
        ],
        view: new ol.View({
            center: ol.proj.transform([-4.495420, 50.339800], 'EPSG:4326', 'EPSG:3857'),            
            zoom: 12
        })
    });

    function clickTestButton()
    {   
        //moveFeature(iconFeature, next.coords, next.course, next.speed);
    }

    $(function () {

        $(document).on("click", "#test-button", function () {
            clickTestButton();
        });


    });
})(window.jQuery);